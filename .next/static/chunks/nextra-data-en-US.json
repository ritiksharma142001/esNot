{"/java/1":{"title":"Installation","data":{"":"System Requirements:\nNode.js 18.18 or later.\nmacOS, Windows (including WSL), and Linux are supported.","automatic-installation#Automatic Installation":"We recommend starting a new Next.js app using create-next-app, which sets up everything automatically for you. To create a project, run:\nnpx create-next-app@latest\nOn installation, you'll see the following prompts:\nWhat is your project named? my-app\r\nWould you like to use TypeScript? No / Yes\r\nWould you like to use ESLint? No / Yes\r\nWould you like to use Tailwind CSS? No / Yes\r\nWould you like your code inside a `src/` directory? No / Yes\r\nWould you like to use App Router? (recommended) No / Yes\r\nWould you like to use Turbopack for `next dev`?  No / Yes\r\nWould you like to customize the import alias (`@/*` by default)? No / Yes\r\nWhat import alias would you like configured? @/*\nAfter the prompts, create-next-app will create a folder with your project name and install the required dependencies.If you're new to Next.js, see the project structure docs for an overview of all the possible files and folders in your application.\nGood to know:\nNext.js now ships with TypeScript, ESLint, and Tailwind CSS configuration by default.\nYou can optionally use a src directory in the root of your project to separate your application's code from configuration files.","manual-installation#Manual Installation":"To manually create a new Next.js app, install the required packages:\nnpm install next@latest react@latest react-dom@latest\nOpen your package.json file and add the following scripts:\n{\r\n  \"scripts\": {\r\n    \"dev\": \"next dev\",\r\n    \"build\": \"next build\",\r\n    \"start\": \"next start\",\r\n    \"lint\": \"next lint\"\r\n  }\r\n}\nThese scripts refer to the different stages of developing an application:\ndev: runs next dev to start Next.js in development mode.\nbuild: runs next build to build the application for production usage.\nstart: runs next start to start a Next.js production server.\nlint: runs next lint to set up Next.js' built-in ESLint configuration.","creating-directories#Creating directories":"Next.js uses file-system routing, which means the routes in your application are determined by how you structure your files.","the-app-directory#The app directory":"For new applications, we recommend using the App Router. This router allows you to use React's latest features and is an evolution of the Pages Router based on community feedback.Create an app/ folder, then add a layout.tsx and page.tsx file. These will be rendered when the user visits the root of your application (/).Create a root layout inside app/layout.tsx with the required <html> and <body> tags:\nexport default function RootLayout({\r\n  children,\r\n}: {\r\n  children: React.ReactNode\r\n}) {\r\n  return (\r\n    <html lang=\"en\">\r\n      <body>{children}</body>\r\n    </html>\r\n  )\r\n}\nexport default function RootLayout({ children }) {\r\n  return (\r\n    <html lang=\"en\">\r\n      <body>{children}</body>\r\n    </html>\r\n  )\r\n}\nFinally, create a home page app/page.tsx with some initial content:\nexport default function Page() {\r\n  return <h1>Hello, Next.js!</h1>\r\n}\nexport default function Page() {\r\n  return <h1>Hello, Next.js!</h1>\r\n}\nGood to know: If you forget to create layout.tsx, Next.js will automatically create this file when running the development server with next dev.\nLearn more about using the App Router.","the-pages-directory-optional#The pages directory (optional)":"If you prefer to use the Pages Router instead of the App Router, you can create a pages/ directory at the root of your project.Then, add an index.tsx file inside your pages folder. This will be your home page (/):\nexport default function Page() {\r\n  return <h1>Hello, Next.js!</h1>\r\n}\nNext, add an _app.tsx file inside pages/ to define the global layout. Learn more about the custom App file.\nimport type { AppProps } from 'next/app'\r\n\r\nexport default function App({ Component, pageProps }: AppProps) {\r\n  return <Component {...pageProps} />\r\n}\nexport default function App({ Component, pageProps }) {\r\n  return <Component {...pageProps} />\r\n}\nFinally, add a _document.tsx file inside pages/ to control the initial response from the server. Learn more about the custom Document file.\nimport { Html, Head, Main, NextScript } from 'next/document'\r\n\r\nexport default function Document() {\r\n  return (\r\n    <Html>\r\n      <Head />\r\n      <body>\r\n        <Main />\r\n        <NextScript />\r\n      </body>\r\n    </Html>\r\n  )\r\n}\nLearn more about using the Pages Router.\nGood to know: Although you can use both routers in the same project, routes in app will be prioritized over pages. We recommend using only one router in your new project to avoid confusion.","the-public-folder-optional#The public folder (optional)":"Create a public folder to store static assets such as images, fonts, etc. Files inside public directory can then be referenced by your code starting from the base URL (/).","run-the-development-server#Run the Development Server":"Run npm run dev to start the development server.\nVisit http://localhost:3000 to view your application.\nEdit app/page.tsx (or pages/index.tsx) file and save it to see the updated result in your browser."}},"/":{"title":"index","data":{}},"/java/1/a":{"title":"A","data":{}},"/java/1/b":{"title":"B","data":{}}}